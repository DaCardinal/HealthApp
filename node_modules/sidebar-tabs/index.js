const electron = require('electron');
const app = electron.app;
const remote = electron.remote;
const EventEmitter = require("events");
const windowManager = remote.require('electron-window-manager');
const fileSystem = require('fs');
const Promise = require('pinkie');
const TabGroup = require('electron-tabs');
const Path = require('path');
const dragula = require('dragula');

let appBase = windowManager.config.appBase;
if (!document) {
    throw Error("electron-tabs module must be called in renderer process");
}

var sidebarjs = 'sidebarjs';
var isVisible = sidebarjs + "--is-visible";
var isMoving = sidebarjs + "--is-moving";
var LEFT_POSITION = 'left';
var RIGHT_POSITION = 'right';
var TRANSITION_DURATION = 400;
var POSITIONS = [LEFT_POSITION, RIGHT_POSITION];
let tabGroup = new TabGroup({
    ready: function (tabGroup) {
        dragula([tabGroup.tabContainer], {
            direction: 'horizontal'
        });
    }
});

class SideBarPanel extends EventEmitter {
    constructor (args = {}) {
        super();
        let options = this.options = {
            sidebarTabClass: args.tabClass || "sidebar-tab",
            ready: args.ready
        };
        this.component = document.querySelector("#wrapper");
        this.tabContainer = this.component.querySelector("#static-sidebar > ul");
        this.tabContainerBottom = this.component.querySelector("#static-sidebar > ul .static-sidebar-nav-bottom");
        this.tabContainerContents = this.component.querySelector(".sidebar-wrapper");
        this.tabs = [];
        this.newTabId = 0;
        this.activeTabId = -1;
        this.pageTabGroup = new TabGroup({
            ready: function (tabGroup) {
                dragula([tabGroup.tabContainer], {
                    direction: 'horizontal'
                });
            }
        });
        
        if (typeof this.options.ready === "function") {
            this.options.ready(this);
        }

    }

    addElement (args = this.options.newTab){
        if (typeof args === "function") {
            args = args(this);
        }
        let id = this.newTabId;
        this.newTabId++;
        let tab = new Tab(this, id, args);
        // Check if tab exists before pushing
        if(!this.getTab(tab.id)){
            this.tabs.push(tab);
        }

        this.emit("sidebar-added", tab, this);
        return tab;
    }
    
    getTab (id) {
        for (let i in this.tabs) {
            if (this.tabs[i].id === id) {
                return this.tabs[i];
            }
        }
        return null;
    }

    getActiveTab () {
        if (this.tabs.length === 0) return null;
        return this.tabs[0];
    }

    toggle() {
        this.isOpen() ? this.close() : this.open();
    }

    open() {
        if(this.component.classList.contains("collapsed-toggle")){
            this.component.classList.remove("collapsed-toggle");
        }
        this.component.classList.add("toggled");
    }

    close() {
        this.component.classList.remove("toggled");
    }

    minimize () {
       if(!this.component.classList.contains("collapsed-toggle")){
          this.component.classList.add("collapsed-toggle");
       }
    }

    isFullWidth () {
        return !this.component.classList.contains("collapsed-toggle") && !this.component.classList.contains("toggled");
    };

    isMinimized () {
        return this.component.classList.contains("collapsed-toggle");
    }

    isOpen () {
        return this.component.classList.contains("toggled") && !this.component.classList.contains("collapsed-toggle");
    }
    
}

class Tab extends EventEmitter {
    constructor (tabGroup, id, args) {
        super();
        this.tabGroup = tabGroup;
        this.id = id;
        this.title = args.title;
        this.expandable = args.expandable === false ? false : true;
        this.tabElements = {};
        this.config = args.config || null;
        this.src = "";
        this.isOpen = false;

        // Set individual tabs and behaviour here
        TabPrivate.initTab.bind(this)();

        if (args.visible !== false) {
            this.show();
        }
        if (args.active === true) {
            this.activate();
        }
        if (typeof args.ready === "function") {
            args.ready(this);
        }
    }

    setTitle (title) {
        if (this.isClosed) return;
        let span = this.tabElements.title,
            anchor = this.tabElements.anchor;
        span.innerHTML = title;
        this.title = title;
        anchor.setAttribute("title", title);
        anchor.setAttribute("data-title", title);

        this.emit("title-changed", title, this);
        return this;
    }

    getTitle (){
        return this.title;
    }

    activate () {
        if (this.isClosed) return;
        let activeTab = this.tabGroup.getActiveTab();
        //TODO: Remove old active tab indication on current tab
        if (activeTab) {
            activeTab.tab.classList.remove("active");
        }
        
        TabGroupPrivate.setActiveTab.bind(this.tabGroup)(this);
        this.tabGroup.activeTabId = this.id;
        this.tab.classList.add("active");

        this.emit("active", this);

        return this;
    }

    show (flag) {
        if (this.isClosed) return;
        if (flag !== false) {
            this.tab.classList.remove("hide");
            this.tab.classList.add("visible");
            this.emit("visible", this);
        } else {
            this.tab.classList.add("hide");
            this.emit("hidden", this);
        }
        return this;
    }

    hide () {
        return this.show(false);
    }

    flash (flag) {
        if (this.isClosed) return;
        if (flag !== false) {
            this.tab.classList.add("flash");
            this.emit("flash", this);
        } else {
            this.tab.classList.remove("flash");
            this.emit("unflash", this);
        }
        return this;
    }

    unflash () {
        return this.flash(false);
    }

    close (force) {
        if (this.isClosed || (!this.closable && !force)) return;

        this.tab.classList.remove("active");
        // this.isClosed = true;
        let tabGroup = this.tabGroup;
        let activeTab = this.tabGroup.getActiveTab();

        TabGroupPrivate.removeTab.bind(tabGroup)(this, false);

        if (activeTab.id === this.id) {
            TabGroupPrivate.activateRecentTab.bind(tabGroup)();
            TabPrivate._toggleSidebarChildren.bind(this)(false);
        }

        this.isOpen = false;
        this.emit("close", this);
    }

    openChildView () {
        let activeTab = this.tabGroup.getActiveTab();
        let id = this.id;

        // Capture if child elements have not been created
        if(!this.tabElements["children"]){
            this.on("child-view-loaded", function(tab){
                tab.openChildView();
            });
            return;
        }

        //Check if tab is active
        if(!activeTab) {
            this.activate();
            activeTab = this.tabGroup.getActiveTab();
        }
        
        //Open inner sidebar contents
        TabPrivate._toggleSidebarChildren.bind(this)(true);
        this.isOpen = true;

        //If a tab is active
        if(activeTab.id !== id){
            this.tabGroup.open();
        } else {
            this.tabGroup.toggle();
        }
        
        //If tab is not open
        // TabGroupPrivate.addToTabGroup.bind(this)(this, true);

        this.emit("click", this);
        this.activate();
    }

    isActiveTab() {
        let tab = this.tabGroup.getActiveTab();
        
        if(tab){ 
            if (this.id === tab.id){
                return true;
            }
        }
        return false;
    }
    
}

const Helpers = {
    getJson: function(pathToFile){
        return new Promise(function(resolve, reject) {
            fileSystem.readFile(pathToFile, function (err, data) {
                if (err) {
                    reject(err);
                } else {
                    resolve(JSON.parse(data));
                }
            });
        });
    },
    guidGenerator: function() {
        let S4 = function() {
            return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
        };
        return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
    }
}

const TabPrivate = {
    initTab: function () {
        this.tab = document.createElement("li");
        let urlJSON = this.config;
        
        // Read menu items and create sidebar
        if (urlJSON) {
            Helpers.getJson(urlJSON).then(function(result) {
                TabPrivate._buildSidebarItems(result, this);
                this.setTitle(this.title);
                
                TabPrivate.initTabButtons.bind(this)(result);
                TabPrivate.initTabClickHandler.bind(this)();

            }.bind(this), function(err) {
                console.log('Can not find the he targeted page :' + err);
            }.bind(this));
        } else {
            console.log('Config not set!');
        }
    },

    initTabChildren: function (sidebarConfig) {
        TabPrivate._buildSidebarChildren.bind(this)(sidebarConfig);
    },

    initTabButtons: function (sidebarConfig) {
        if (this.expandable) {
            TabPrivate.initTabChildren.bind(this)(sidebarConfig);
        }
    },

    initTabClickHandler: function () {
        // Click
        const tabClickHandler = function (e) {
            if (this.isClosed) return;
            if (e.which === 2) {
                console.log("closed?");
                this.close();
            }
            this.emit("click", this);
        };
        this.tab.addEventListener("click", tabClickHandler.bind(this), false);

        // Mouse down
        const tabMouseDownHandler = function (e) {
            if (this.isClosed) return;
            if (e.which === 1) {
                if (e.target.matches("button")) return; // Checks what the user clicked
                if (this.expandable) this.openChildView();
                this.activate();
            }
        };
        this.tab.addEventListener("mousedown", tabMouseDownHandler.bind(this), false);
    },

    _buildSidebarItems: function (sidebarConfig, tabHandler){
        if (sidebarConfig["type"] === "menu") {
            let span = document.createElement("span");
            let anchor = document.createElement("a");
            let icon = document.createElement("i");

            tabHandler.tab.classList.add(tabHandler.tabGroup.options.sidebarTabClass);
            anchor.classList.add("menu-toggle");
            anchor.setAttribute("rel", "static-sidebar-nav-tooltip");
            for (let el of sidebarConfig["icon"].split(" ")) {
                icon.classList.add(el);
            }
            span.classList.add("static-sidebar-nav-text");

            anchor.appendChild(icon);
            anchor.appendChild(span);
            tabHandler.tab.appendChild(anchor);
            tabHandler.src = sidebarConfig["src"];
            tabHandler.tabElements["anchor"] = anchor;
            tabHandler.tabElements["icon"] = icon;
            tabHandler.tabElements["title"] = span;  
        } else if (sidebarConfig["type"] === "settings") {
            tabHandler.tab.classList.add("static-sidebar-nav-bottom");
            for (let setting of sidebarConfig["menu"]){
                let span = document.createElement("span");
                let anchor = document.createElement("a");
                let icon = document.createElement("i");

                span.classList.add("static-sidebar-nav-text");
                span.innerHTML = setting.item;

                for (let el of setting.icon.split(" ")) {
                    icon.classList.add(el);
                }
                anchor.appendChild(icon);
                anchor.appendChild(span);
                anchor.setAttribute("rel", "static-sidebar-nav-tooltip");
                anchor.setAttribute("data-title", setting.item);
                tabHandler.tab.appendChild(anchor);
            }
        }
        tabHandler.tabGroup.tabContainer.appendChild(tabHandler.tab);
    }, 

    _buildSidebarChildren: function (config) {
        let ulWrapper = document.createElement("ul");
        let header = document.createElement("div");
        let pTagWrapper = document.createElement("p");

        pTagWrapper.innerHTML = this.title;
        ulWrapper.classList.add("sidebar-nav");
        header.classList.add("sidebar-nav-header");
        header.appendChild(pTagWrapper);

        for (let el2 of config["menu"]) {
            let anchor = document.createElement("a");
            let ulTag = document.createElement("ul");
            let liHeaderTag = document.createElement("li");
            let id = "stid-" + Helpers.guidGenerator();

            anchor.innerHTML = el2.item;
            ulTag.classList.add("nav", "nav-list", "collapse", "sidebar-nav-accordion-panel");

            liHeaderTag.classList.add("nav-header", "sidebar-brand", "sidebar-nav-accordion", "collapsed");
            liHeaderTag.setAttribute("data-toggle", "collapse");
            liHeaderTag.setAttribute("data-target", "#"+id);
            liHeaderTag.appendChild(anchor);

            for (let el of el2["list"]) {
                let span = document.createElement("span");
                let pTag = document.createElement("p");
                let liTag = document.createElement("li");

                pTag.innerHTML = el.content;
                pTag.classList.add("sidebar-item-inner");
                span.classList.add("sidebar-item");
                ulTag.setAttribute("id", id);

                span.appendChild(pTag);
                liTag.appendChild(span);
                liTag.addEventListener("click", function(){
                    electron.ipcRenderer.send('sidebar-child-clicked', liTag);
                });
                ulTag.appendChild(liTag);
            }
            ulWrapper.appendChild(liHeaderTag);
            ulWrapper.appendChild(ulTag);
        }

        let childParms = {};
        childParms["header"] = header;
        childParms["wrapper"] = ulWrapper;
        this.tabElements["children"] = childParms;

        header.classList.add("hide");
        ulWrapper.classList.add("hide");
        this.tabGroup.tabContainerContents.appendChild(header);
        this.tabGroup.tabContainerContents.appendChild(ulWrapper);
        this.emit("child-view-loaded", this);
    },

    _toggleSidebarChildren: function (showView) {
        let activeTab = this.tabGroup.getActiveTab();

        if(!activeTab) {
            this.tabGroup.close();
            return;
        }

        if(showView) {
            activeTab.tabElements["children"]["header"].classList.add("hide");
            activeTab.tabElements["children"]["wrapper"].classList.add("hide");
            this.tabElements["children"]["header"].classList.remove("hide");
            this.tabElements["children"]["wrapper"].classList.remove("hide");
        } else {
            activeTab.tabElements["children"]["header"].classList.remove("hide");
            activeTab.tabElements["children"]["wrapper"].classList.remove("hide");
            this.tabElements["children"]["header"].classList.add("hide");
            this.tabElements["children"]["wrapper"].classList.add("hide");
        }
    }
};

const TabGroupPrivate = {

    removeTab: function (tab, triggerEvent) {
        let id = tab.id;

        for (let i in this.tabs) {
            if (this.tabs[i].id === id) {
                this.tabs.splice(i, 1);
                break;
            }
        }

        if (triggerEvent) {
            this.emit("tab-removed", tab, this);
        }
        return this;
    },
    
    setActiveTab: function (tab) {
        TabGroupPrivate.removeTab.bind(this)(tab);
        this.tabs.unshift(tab);
        this.emit("tab-active", tab, this);
        return this;
    },

    activateRecentTab: function (tab) {
        if (this.tabs.length > 0) {
            this.tabs[0].activate();
        }
        return this;
    }, 

    addToTabGroup: function (tab, preloadJS){
        console.log('we here');
        console.log(this);
        // console.log(tab);
        let title = tab.title;
        let dir = tab.src;

         let myNewTab = tab.tabGroup.pageTabGroup.addTab.bind(tab.tabGroup.pageTabGroup)({
                title: title,
                src: Path.join(appBase, '/views/main-frame/', dir + '.html'),
                visible: true,
                active: true,
                webviewAttributes: {
                nodeintegration: true,
                plugins: true,
                preload: preloadJS ? Path.join(appBase, '/views/main-frame/', dir + '.controller.js') : ""
            },
            ready: function (tabGroup) {
                let t = tabGroup.getActiveTab();
                let webview = t.webview;
                webview.addEventListener('did-finish-load', function () {
                    // webview.insertCSS("body::-webkit-scrollbar {width: 3px;height: 2px; background-color: #F5F5F5;}body::-webkit-scrollbar-button {width: 0px;height: 0px;}body::-webkit-scrollbar-thumb {background: #000000; border: 0px none #ffffff;border-radius: 50px;}body::-webkit-scrollbar-thumb:hover {background: #333;}body::-webkit-scrollbar-thumb:active {background: #000000;}body::-webkit-scrollbar-track {background: #666666;border: 0px none #ffffff;border-radius: 50px;}body::-webkit-scrollbar-track:hover {background: #666666;}body::-webkit-scrollbar-track:active {background: #333333;}body::-webkit-scrollbar-corner {background: transparent;}");
                    webview.insertCSS("body::-webkit-scrollbar-track{-webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3);background-color: #F5F5F5;}body::-webkit-scrollbar-track:hover{cursor:pointer;}body::-webkit-scrollbar{height: 0px;width: 4px;background-color: #F5F5F5;}body::-webkit-scrollbar-thumb{background-color: #000000;cursor: pointer;}")
                    webview.openDevTools();
                    electron.ipcRenderer.send('registerTab', tab);
                });
            }
        });

        return myNewTab;
    }
};

exports.define = function (name, value, exportsObject) {
    if (!exportsObject){
      if (exports.exportsObject)
          exportsObject = exports.exportsObject;
      else
          exportsObject = exports;
    }

    Object.defineProperty( exportsObject, name, {
        'value': value,
        'enumerable': true,
        'writable': false,
    });
}
  
// module.exports = SideBarPanel;

exports.define("SideBarPanel",  SideBarPanel);
exports.define("SideBarTab",Tab);

exports.exportObject = null;

